/**
 * websocket协议辅助类
 */

import { CCMIProtocolHelper, CCMNetData } from "../../base/network/CCMNetInterface";
import { ccmLog } from "../../base/utils/CCMLog";
import { WS_CMD_CLASS } from "../config/WSCmdDefine";

const mSendByteMap: Uint8Array = new Uint8Array([
    0xad, 0xcd, 0x41, 0xa5, 0xd6, 0x4a, 0xa1, 0xc8, 0x9b, 0xd5, 0x10, 0x24, 0xe3, 0x8f, 0xdb, 0xdf,
    0x06, 0xe4, 0x5f, 0xe9, 0xe7, 0x1c, 0xc4, 0xf0, 0x89, 0x62, 0x0e, 0x5c, 0x36, 0x8c, 0x47, 0x87,
    0x78, 0x02, 0xcc, 0x95, 0xed, 0xa3, 0x1d, 0x44, 0x7b, 0x23, 0x4d, 0x12, 0x30, 0x94, 0xb0, 0xe5,
    0xc5, 0x0c, 0xfb, 0x52, 0x75, 0x96, 0xe1, 0xea, 0x48, 0x31, 0xbb, 0xb3, 0x13, 0xa7, 0x08, 0x71,
    0xd9, 0x92, 0x32, 0xc1, 0x8a, 0xb1, 0xe2, 0x74, 0x22, 0x9f, 0xc9, 0x51, 0xa9, 0x39, 0xeb, 0xfa,
    0xb5, 0x6b, 0x6e, 0x76, 0x26, 0xca, 0xaa, 0x25, 0x2f, 0x49, 0xbd, 0x29, 0x5d, 0x59, 0x85, 0x4c,
    0x4e, 0x53, 0xf4, 0x1e, 0xbf, 0xb7, 0x9d, 0x93, 0xb4, 0x4b, 0x7c, 0x54, 0x90, 0xd4, 0xa0, 0x1a,
    0x00, 0xba, 0xb6, 0xc6, 0x82, 0xc3, 0x2d, 0x99, 0xf8, 0x0b, 0x28, 0x14, 0x11, 0x21, 0x88, 0x40,
    0x38, 0xdd, 0x5a, 0xae, 0x84, 0x79, 0x6d, 0x6c, 0xa6, 0x27, 0xbc, 0xde, 0xc0, 0x0f, 0x65, 0x8d,
    0x97, 0xd1, 0x5e, 0x64, 0x34, 0x2b, 0x73, 0xa2, 0x91, 0xf3, 0x37, 0x63, 0xf2, 0xcf, 0x80, 0x9e,
    0xac, 0x7f, 0xc7, 0x20, 0xce, 0x57, 0x66, 0xd8, 0x45, 0x0d, 0xd0, 0xfd, 0x42, 0xbe, 0xf9, 0x07,
    0xab, 0x3e, 0xa4, 0x77, 0xfc, 0x7e, 0x3c, 0x3a, 0x2c, 0xb2, 0x9a, 0x9c, 0xb9, 0x04, 0x43, 0x2a,
    0x7a, 0x15, 0x70, 0x18, 0x16, 0x6a, 0x03, 0xda, 0x8b, 0x7d, 0x6f, 0xd2, 0x56, 0xcb, 0x19, 0x3f,
    0x01, 0xef, 0x46, 0x05, 0x60, 0x4f, 0x69, 0x58, 0xd3, 0xaf, 0xff, 0xf5, 0x55, 0x35, 0x8e, 0x72,
    0xf6, 0x09, 0x17, 0x86, 0xc2, 0x5b, 0xe0, 0x50, 0x2e, 0x83, 0xf7, 0x1b, 0xee, 0xd7, 0xf1, 0xec,
    0xb8, 0xe8, 0x81, 0x0a, 0x61, 0xa8, 0xe6, 0x33, 0xfe, 0x3b, 0x1f, 0xdc, 0x3d, 0x98, 0x67, 0x68
]);

const mRecvByteMap: Uint8Array = new Uint8Array([
    0x70, 0xd0, 0x21, 0xc6, 0xbd, 0xd3, 0x10, 0xaf, 0x3e, 0xe1, 0xf3, 0x79, 0x31, 0xa9, 0x1a, 0x8d,
    0x0a, 0x7c, 0x2b, 0x3c, 0x7b, 0xc1, 0xc4, 0xe2, 0xc3, 0xce, 0x6f, 0xeb, 0x15, 0x26, 0x63, 0xfa,
    0xa3, 0x7d, 0x48, 0x29, 0x0b, 0x57, 0x54, 0x89, 0x7a, 0x5b, 0xbf, 0x95, 0xb8, 0x76, 0xe8, 0x58,
    0x2c, 0x39, 0x42, 0xf7, 0x94, 0xdd, 0x1c, 0x9a, 0x80, 0x4d, 0xb7, 0xf9, 0xb6, 0xfc, 0xb1, 0xcf,
    0x7f, 0x02, 0xac, 0xbe, 0x27, 0xa8, 0xd2, 0x1e, 0x38, 0x59, 0x05, 0x69, 0x5f, 0x2a, 0x60, 0xd5,
    0xe7, 0x4b, 0x33, 0x61, 0x6b, 0xdc, 0xcc, 0xa5, 0xd7, 0x5d, 0x82, 0xe5, 0x1b, 0x5c, 0x92, 0x12,
    0xd4, 0xf4, 0x19, 0x9b, 0x93, 0x8e, 0xa6, 0xfe, 0xff, 0xd6, 0xc5, 0x51, 0x87, 0x86, 0x52, 0xca,
    0xc2, 0x3f, 0xdf, 0x96, 0x47, 0x34, 0x53, 0xb3, 0x20, 0x85, 0xc0, 0x28, 0x6a, 0xc9, 0xb5, 0xa1,
    0x9e, 0xf2, 0x74, 0xe9, 0x84, 0x5e, 0xe3, 0x1f, 0x7e, 0x18, 0x44, 0xc8, 0x1d, 0x8f, 0xde, 0x0d,
    0x6c, 0x98, 0x41, 0x67, 0x2d, 0x23, 0x35, 0x90, 0xfd, 0x77, 0xba, 0x08, 0xbb, 0x66, 0x9f, 0x49,
    0x6e, 0x06, 0x97, 0x25, 0xb2, 0x03, 0x88, 0x3d, 0xf5, 0x4c, 0x56, 0xb0, 0xa0, 0x00, 0x83, 0xd9,
    0x2e, 0x45, 0xb9, 0x3b, 0x68, 0x50, 0x72, 0x65, 0xf0, 0xbc, 0x71, 0x3a, 0x8a, 0x5a, 0xad, 0x64,
    0x8c, 0x43, 0xe4, 0x75, 0x16, 0x30, 0x73, 0xa2, 0x07, 0x4a, 0x55, 0xcd, 0x22, 0x01, 0xa4, 0x9d,
    0xaa, 0x91, 0xcb, 0xd8, 0x6d, 0x09, 0x04, 0xed, 0xa7, 0x40, 0xc7, 0x0e, 0xfb, 0x81, 0x8b, 0x0f,
    0xe6, 0x36, 0x46, 0x0c, 0x11, 0x2f, 0xf6, 0x14, 0xf1, 0x13, 0x37, 0x4e, 0xef, 0x24, 0xec, 0xd1,
    0x17, 0xee, 0x9c, 0x99, 0x62, 0xdb, 0xe0, 0xea, 0x78, 0xae, 0x4f, 0x32, 0xb4, 0xab, 0xf8, 0xda
]);

export default class WSProtocolHelper implements CCMIProtocolHelper {

    getHeadLen(): number {
        return 0;
    }
    getHeartbeat(): CCMNetData {
        return "";
    }
    getPackageLen(msg: CCMNetData): number {
        return msg.toString().length;
    }
    checkPackage(msg: CCMNetData): boolean {
        return true;
    }
    getPackageId(msg: CCMNetData): number {
        let msgView: DataView = new DataView(msg as any);
        let cmd = msgView.getUint32(8);
        return cmd;
    }

    public static mapSendByte(num: number): number {
        return mSendByteMap[num];
    }

    public static mapRecvByte(num: number): number {
        return mRecvByteMap[num];
    }

    // 连接多个buffer
    public static connectArrayBuffer(...args: any[]): ArrayBuffer {
        let totalLen = 0;
        let buffer = null;

        for (let i = 0; i < args.length; i++) {
            buffer = args[i];
            totalLen += buffer.byteLength;
        }

        let joinedBuffer = new Uint8Array(totalLen);
        let offset = 0;
        for (let i = 0; i < args.length; i++) {
            buffer = args[i];
            joinedBuffer.set(new Uint8Array(buffer), offset);
            offset += buffer.byteLength;
        }

        return <ArrayBuffer>joinedBuffer.buffer;
    }

    // 加密包
    public static encodePackage(cmd: number, data: any): ArrayBuffer {
        let cmdClass = WS_CMD_CLASS[cmd];
        if (!cmdClass) return null;

        let dataObj = cmdClass.create(data);
        let dataBuffer: Uint8Array = cmdClass.encode(dataObj).finish();     // 数据buffer

        let cbCheckCode = 0;
        let dataBufferLength = dataBuffer.length;

        for (let i = 0; i < dataBufferLength; i++) {
            cbCheckCode += dataBuffer[i];

            dataBuffer[i] = WSProtocolHelper.mapSendByte(dataBuffer[i]);
        }
        let code = (~cbCheckCode + 1);

        let head: Uint8Array = new Uint8Array(12);
        let totalLen = 12 + dataBufferLength - 4;

        // 写入4字节长度
        head[3] = (totalLen >> 0) & 0xff;
        head[2] = (totalLen >> 8) & 0xff;
        head[1] = (totalLen >> 16) & 0xff;
        head[0] = (totalLen >> 24) & 0xff;

        // 写入3字节固定值
        head[4] = 0x53;
        head[5] = 0x54;
        head[6] = 0x01;
        // 写入1字节加密(TS里面的加密）
        head[7] = code;

        // 写入4字节协议号
        // head[8] = (cmd >> 0) & 0xFF;
        // head[9] = (cmd >> 8) & 0xFF;
        head[10] = (cmd >> 8) & 0xFF;
        head[11] = cmd;

        let encodedBuffer = WSProtocolHelper.connectArrayBuffer(head, dataBuffer);
        return encodedBuffer;
    }

    // 解密包
    public static decodePackage(cmd: number, msg: any) {
        let cmdClass = WS_CMD_CLASS[cmd];
        if (!cmdClass) {
            ccmLog.error("WSProtocolHelper decodePackage error cmdClass not found cmd:", cmd);
            return { cmd: cmd, dataObj: null };
        }

        let dataBuffer: Uint8Array = new Uint8Array(msg.slice(12, msg.byteLength));
        for (let i = 0; i < dataBuffer.length; i++) {
            dataBuffer[i] = WSProtocolHelper.mapRecvByte(dataBuffer[i]);
        }

        let dataObj = cmdClass.decode(dataBuffer);
        return { cmd: cmd, dataObj: dataObj };
    }
}
